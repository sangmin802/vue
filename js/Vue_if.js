// Vue에서는 v-if, v-else, v-else-if 디렉티브를 사용하여 조건부 렌더링을 사용할 수 있다.
//  1. v-if
//     v-if를 사용하여 조건부 렌더링을 할 수 있는데, v-if는 기준이되는 하나의 엘리먼트에 추가되어야 합니다. 하지만 추가하고싶지 않다면, 최종 렌더링 결과에 추가되지 않는 <template>를 사용하면 된다. 
//     1) v-else를 통해, v-if가 아닌 모든 경우에 대한 렌더링을 할 수 있습니다.
new Vue({
  el : '#ifElse',
  data : {
    ok : true
  }
})
//     2) v-else-if를 통해, v-if가 아닌 조건을 생성할 수 있습니다.
new Vue({
  el : '#ifElseIf',
  data : {
    menu : 1
  }
})
//     3) key를 이용한 재사용 가능 엘리먼트 제어
//        Vue는 가능한 효율적으로 엘리먼트를 렌더링하려하기 위해 처음부터 렌더링하는것이 아닌 재활용을 합니다.
//        따라서, 완전 별개의 것으로 재활용하지 않도록 하기 위해 key 속성을 사용한다.
new Vue({
  el : '#key',
  data : {
    loginType : 'username'
  }
})


//  2. v-show
//    엘리먼트를 조건부로 표시하기 위한 또 다른 옵션은 v-show디렉티브 이다. 사용법은 거의 동일하다. 차이점은 v-show가 있는 엘리먼트는 항상 렌더링되고 DOM에 남아있는다. 단순히 display css속성을 토글합니다.
new Vue({
  el : '#vshow',
  data : {
    ok : false
  }
})

//  3. v-if vs v-show
//     1) v-if : 조건이 걸려있는 블럭 안의 이벤트 리스너와 자식 컴포넌트가 재활용가능한부분은 나두고 바뀌는 부분만 제거되었다 다시 만들어지기 때문에, 진짜 조건부 렌더링을 한다. 따라서, 초기에는 빠르지만, 조건이 바뀔때마다 새롭게 렌더링 하므로 부담이 간다.
//     2) v-show : 렌더링은 모두 한다음, 조건에 해당되는 부분만 displa : block으로 노출시킨다. 따라서 초기에만 시간이 걸리고, 이후에는 부담이없다.

//  4. v-if와 v-for
//     v-if, v-for 함께 사용하는 경우, v-for는 v-if보다 높은 우선순위를 갖는다(리스트렌더링에서 자세히 다룸)