// 템플릿 문법
//    Vue.js는 렌더링된 DOM을 기본 Vue인스턴스의 데이터에 선언적으로 바인딩할 수 있는 HTML기반 템플릿 구문을 사용한다.

// 1. 보간법
//    1) 문자열
//        데이터 바인딩의 가진 기본형태는 이중중괄호를 사용한 텍스트 보간입니다.
//    2) 원시 HTML
//        단! v-html은 태그를 그대르 읽어오기 때문에, 해커가 this.HTML로 직접접촉하여 바꾸게 되면 XSS에 매우 취약하기때문에 사용하지 말자.
//        문자열이 아닌 실제 HTML을 출력하려면, v-html 디렉티브를 사용해야 한다.

//    3) 속성
//        중괄호는 HTML 속성에서 사용할 수 없습니다. 속성은 v-bind 디렉티브를 사용해야 한다. (이후, 컴포넌트화 할 때 props 전달도 이러한 방식으로 함.)

//    4) JavaScript 표현식 사용
//        구문이나, 조건문등은 작동하지 않는다.
new Vue({
  el : '#Interpolation',
  data : {
    string : '문자열 보간법 {{}}',
    HTML : '<span style="color:red">This should be red.</span>',
    bindProp : 'bindProp',
    count : 0,
    ok : true,
    arr : [1,2,3,4]
  }
})

// 디렉티브
//    v- 접두사가 있는 특수 속성이다. 디렉티브의 속성 값은, 단일 JavaScript 표현식이 된다.

//    1) 전달인자
//        일부 디렉티브는 : 으로 표시되는 전달인자를 사용할 수 있다. 예를들어, v-bind는 HTML의 속성을 갱신하는데 사용된다.
//        또한, DOM의 이벤트를 수신하는 v-on 디렉티브가 있다.

//    2) 동적 전달인자
//        JavaScript 표현식을 대괄호로 묶어 디렉티브의 인자로 사용하는것도 가능해졌다. 안쓸듯?

//    3) 수식어
//        수식어는 점으로 표시되는 특수 접미사로, 디렉티브를 특별한 방법으로 바인딩 해야 함을 나타낸다. 예를들어, .prevent수식어는 트리거된 이벤트에서 event.preventDefault()를 호출하도록 알려준다.
new Vue({
  el : '#Directive',
  data : {
    seen : true,
    naverUrl : 'https://www.naver.com/',
    url : 'href'
  },
})

// 3. 약어
//    v-접두사는 템플릿의 Vue 특정 속성을 식별하기 위한 시각적인 신호 역할을 한다. 아주 유용하지만, 일부 자주 사용되는 디렉티브는 너무 지저분해진다고 느껴질 수 있다.
//    v-bind : :
//    v-on : @